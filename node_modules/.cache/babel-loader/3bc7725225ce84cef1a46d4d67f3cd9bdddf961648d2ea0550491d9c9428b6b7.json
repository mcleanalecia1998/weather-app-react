{"ast":null,"code":"var _jsxFileName = \"/Users/aleciamclean/Desktop/Coding/GitHub/weather-app-react/my-app/src/FormatDate.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormatDate(props) {\n  let months = [January, February, March, April, May, june, july, August, October, November, December];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let month = props.date.getMonth();\n  let day = days[props.date.getDay()];\n  let hours = props.date.getHours();\n  if (hours < 10) {\n    hours = `0{hours}`;\n  }\n  let minutes = props.date.getMinutes();\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  let amOrPm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [month, day, \" \", hours, \":\", minutes, amOrPm]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_c = FormatDate;\nvar _c;\n$RefreshReg$(_c, \"FormatDate\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FormatDate","props","months","January","February","March","April","May","june","july","August","October","November","December","days","month","date","getMonth","day","getDay","hours","getHours","minutes","getMinutes","amOrPm","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aleciamclean/Desktop/Coding/GitHub/weather-app-react/my-app/src/FormatDate.js"],"sourcesContent":["import React from \"react\";\n\nexport default function FormatDate(props) {\n  let months = [\n    January,\n    February,\n    March,\n    April,\n    May,\n    june,\n    july,\n    August,\n    October,\n    November,\n    December,\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let month = props.date.getMonth();\n  let day = days[props.date.getDay()];\n  let hours = props.date.getHours();\n  if (hours < 10) {\n    hours = `0{hours}`;\n  }\n  let minutes = props.date.getMinutes();\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  let amOrPm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n\n  return (\n    <div>\n      {month}\n      {day} {hours}:{minutes}\n      {amOrPm}\n    </div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,UAAUA,CAACC,KAAK,EAAE;EACxC,IAAIC,MAAM,GAAG,CACXC,OAAO,EACPC,QAAQ,EACRC,KAAK,EACLC,KAAK,EACLC,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,QAAQ,CACT;EACD,IAAIC,IAAI,GAAG,CACT,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,QAAQ,EACR,UAAU,CACX;EAED,IAAIC,KAAK,GAAGd,KAAK,CAACe,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjC,IAAIC,GAAG,GAAGJ,IAAI,CAACb,KAAK,CAACe,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;EACnC,IAAIC,KAAK,GAAGnB,KAAK,CAACe,IAAI,CAACK,QAAQ,CAAC,CAAC;EACjC,IAAID,KAAK,GAAG,EAAE,EAAE;IACdA,KAAK,GAAI,UAAS;EACpB;EACA,IAAIE,OAAO,GAAGrB,KAAK,CAACe,IAAI,CAACO,UAAU,CAAC,CAAC;EACrC,IAAID,OAAO,GAAG,EAAE,EAAE;IAChBA,OAAO,GAAI,IAAGA,OAAQ,EAAC;EACzB;EACA,IAAIE,MAAM,GAAGJ,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;EACtCA,KAAK,GAAGA,KAAK,GAAG,EAAE;EAClBA,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAG,EAAE;EAE1B,oBACErB,OAAA;IAAA0B,QAAA,GACGV,KAAK,EACLG,GAAG,EAAC,GAAC,EAACE,KAAK,EAAC,GAAC,EAACE,OAAO,EACrBE,MAAM;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACC,EAAA,GA7CuB9B,UAAU;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}